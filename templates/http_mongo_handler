// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by template engine. You are free to make amendments as and where required
package handlers

import (
	database "{{.Root}}/database/mongo"
	"{{.Root}}/models"
	"encoding/json"
	"net/http"

	"github.com/gin-gonic/gin"
)

type {{.Model.Name}} struct {
	DB *database.Database
}

func ({{.model_first_letter}} *{{.Model.Name}}) Create{{.Model.Name}}() func(c *gin.Context) {
	var err error
	return func(c *gin.Context) {
		if c.Request.Method == "POST" {
			var {{.model_name}} *models.{{.Model.Name}}
			{{.model_name}} = &models.{{.Model.Name}}{}

			err = json.NewDecoder(c.Request.Body).Decode(&{{.model_name}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			result, err := {{.model_first_letter}}.DB.InsertRecord("{{.model_name}}s", {{.model_name}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": result,
			})
			c.Abort()
			return
		}
	}
}

func ({{.model_first_letter}} *{{.Model.Name}}) Update{{.Model.Name}}ByID() func(c *gin.Context) {
	var err error
	return func(c *gin.Context) {
		if c.Request.Method == "PUT" {

			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}

			var {{.model_name}} map[string]interface{}
			 {{.model_name}} = make(map[string]interface{})

			err = json.NewDecoder(c.Request.Body).Decode(&{{.model_name}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			result, err := {{.model_first_letter}}.DB.UpdateRecordByID("{{.model_name}}s",&id,{{.model_name}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": string(result.(int64)),
			})
			c.Abort()
			return
		}
	}
}

func ({{.model_first_letter}} *{{.Model.Name}}) Delete{{.Model.Name}}ByID() func(c *gin.Context) {
	var err error
	return func(c *gin.Context) {
		if c.Request.Method == "DELETE" {

			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}
			result, err := {{.model_first_letter}}.DB.DeleteRecordByID("{{.model_name}}s",&id)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": string(result.(int64)),
			})
			c.Abort()
			return
		}
	}
}

func ({{.model_first_letter}} *{{.Model.Name}}) Get{{.Model.Name}}ByID() func(c *gin.Context) {
	return func(c *gin.Context) {
		if c.Request.Method == "GET" {
			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}
			{{.model_first_letter}}, err := {{.model_first_letter}}.DB.FindRecordByID("{{.model_name}}s",&id)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			c.JSON(http.StatusOK, {{.model_name}})
		}
	}
}