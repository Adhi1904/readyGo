// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package main

import (
	"net"
	"{{$.config.Project}}/database"
	"{{$.config.Project}}/handlers"
	pb "{{$.config.Project}}/protos"
	"github.com/golang/glog"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	// DBConnection is to store database connection information
	DBConnection =  "{{ $.config.DatabaseSpec.ConnectionString }}"
	// DBName is to store database name
	DBName       =  "{{ $.config.DatabaseSpec.Name }}"
)

func main() {
glog.Info("Application {{$.config.Project}} has started")

session, err := database.GetConnection(DBConnection, DBName)
	//defer session.Disconnect(context.TODO())

	if err != nil {
		glog.Fatal("{{$.config.DatabaseSpec.Kind}} database is not connected", err)
	}
	lis, err := net.Listen("tcp", ":{{$.config.APISpec.Port}}")
	if err != nil {
		glog.Fatalf("failed to listen: %v", err)
	}
	server := grpc.NewServer()

	 {{- range $.config.Models }}
     {{.Name | ToLower}} := new(handlers.{{.Name}})
	 {{.Name | ToLower}}.I{{.Name}} = &database.{{.Name}}DB{DB: session}
	 //{{.Name | ToLower}}pb.Register{{.Name}}Server(server, {{.Name | ToLower}})	
	 pb.Register{{.Name}}Server(server, {{.Name | ToLower}})	
     {{- end}}
	 // Register reflection service on gRPC server.
	reflection.Register(server)
	if err := server.Serve(lis); err != nil {
		glog.Fatalf("failed to serve: %v", err)
	}
}