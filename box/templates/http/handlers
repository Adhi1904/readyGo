// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by template engine. You are free to make amendments as and where required
package handlers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"{{.Project}}/interfaces"
	"{{.Project}}/models"

	"github.com/gin-gonic/gin"
)

type {{.Model.Name}} struct {
	I{{.Model.Name}} interfaces.{{.Model.Name}}Interface
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) Create{{.Model.Name}}() func(c *gin.Context) {
	var err error
	return func(c *gin.Context) {
		if c.Request.Method == "POST" {
			var {{.Model.Name | ToLower}} *models.{{.Model.Name}}
			{{.Model.Name | ToLower}} = &models.{{.Model.Name}}{}

			err = json.NewDecoder(c.Request.Body).Decode(&{{.Model.Name | ToLower}})
			fmt.Println({{.Model.Name | ToLower}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			// Validate model
			err = models.Validate{{.Model.Name}}({{.Model.Name | ToLower}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			result, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.Create{{.Model.Name}}({{.Model.Name | ToLower}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": result,
			})
			c.Abort()
			return
		}
	}
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) Get{{.Model.Name}}ByID() func(c *gin.Context) {
	return func(c *gin.Context) {
		if c.Request.Method == "GET" {
			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}
			{{.Model.Name | ToLower}}, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.Get{{.Model.Name}}ByID(id)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			c.JSON(http.StatusOK, {{.Model.Name | ToLower}})
		}
	}
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) GetAll{{.Model.Name}}s() func(c *gin.Context) {
	return func(c *gin.Context) {
		if c.Request.Method == "GET" {
			skip := c.Param("skip")
			limit := c.Param("limit")

			if skip == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "skip parameter has not been provided",
				})
				c.Abort()
				return
			}

			if limit == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "limit parameter has not been provided",
				})
				c.Abort()
				return
			}

			iskip, err := strconv.ParseInt(skip, 10, 64)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err,
				})
				c.Abort()
				return
			}

			ilimit, err := strconv.ParseInt(limit, 10, 64)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err,
				})
				c.Abort()
				return
			}
			selector := make(map[string]interface{})
			jsonMap := c.Request.URL.Query()

			for key, val := range jsonMap {
				selector[key] = val[0]
			}

			{{.Model.Name | ToLower}}s, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.GetAll{{.Model.Name}}s(int64(iskip), int64(ilimit), selector)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			c.JSON(http.StatusOK, {{.Model.Name | ToLower}}s)
		}
	}
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) GetAll{{.Model.Name}}sBy() func(c *gin.Context) {
	return func(c *gin.Context) {
		if c.Request.Method == "GET" {
			skip := c.Param("skip")
			limit := c.Param("limit")

			if skip == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "skip parameter has not been provided",
				})
				c.Abort()
				return
			}

			if limit == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "limit parameter has not been provided",
				})
				c.Abort()
				return
			}

			iskip, err := strconv.ParseInt(skip, 10, 64)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err,
				})
				c.Abort()
				return
			}

			ilimit, err := strconv.ParseInt(limit, 10, 64)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err,
				})
				c.Abort()
				return
			}

			qstring := c.Request.URL.Query().Get("search")

			selector := make(map[string]interface{})
			jsonMap := c.Request.URL.Query()

			for key, val := range jsonMap {
				if key != "search" {
					selector[key] = val[0]
				}
			}
			{{.Model.Name | ToLower}}s, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.GetAll{{.Model.Name}}sBy(qstring, selector, int64(iskip), int64(ilimit))
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}
			//c.BindJSON(&profiles)
			c.JSON(http.StatusOK, {{.Model.Name | ToLower}}s)
		}
	}
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) Update{{.Model.Name}}ByID() func(c *gin.Context) {
	var err error
	return func(c *gin.Context) {
		if c.Request.Method == "PUT" {

			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}

			var {{.Model.Name | ToLower}} map[string]interface{}
			{{.Model.Name | ToLower}} = make(map[string]interface{})

			err = json.NewDecoder(c.Request.Body).Decode(&{{.Model.Name | ToLower}})
			
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			result, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.Update{{.Model.Name}}ByID(id, {{.Model.Name | ToLower}})
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": result,
			})
			c.Abort()
			return
		}
	}
}

func ({{.Model.Name | Initial}} *{{.Model.Name}}) Delete{{.Model.Name}}ByID() func(c *gin.Context) {
	return func(c *gin.Context) {
		if c.Request.Method == "DELETE" {

			id := c.Param("id")
			if id == "" {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": "id parameter has not been provided",
				})
				c.Abort()
				return
			}

			result, err := {{.Model.Name | Initial}}.I{{.Model.Name}}.Delete{{.Model.Name}}ByID(id)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{
					"status":  "failed",
					"message": err.Error(),
				})
				c.Abort()
				return
			}

			c.JSON(http.StatusOK, gin.H{
				"status":  "success",
				"message": result,
			})
			c.Abort()
			return
		}
	}
}
